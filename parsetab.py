
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '8CF170036D5E91C281BCAB00B07B49EC'
    
_lr_action_items = {'PROGRAM':([0,],[1,]),'ELSE':([6,12,13,21,22,30,39,57,60,61,62,63,65,66,67,69,73,77,92,100,115,116,117,124,133,139,],[-6,-72,-72,-5,-4,-9,-7,-33,-31,-34,-32,-30,-28,-29,-27,-72,-35,-26,-39,-72,-72,-38,-37,131,-71,-61,]),'NOTEQUAL':([3,83,91,104,105,106,107,108,109,129,137,],[-2,93,-40,-56,-54,-47,-55,-46,-43,-53,-48,]),'GREATEQUAL':([3,83,91,104,105,106,107,108,109,129,137,],[-2,97,-40,-56,-54,-47,-55,-46,-43,-53,-48,]),'STRING':([5,12,13,30,39,50,100,103,131,],[9,9,9,-9,-7,9,9,9,9,]),'$end':([2,15,],[0,-1,]),'GREATER':([3,83,91,104,105,106,107,108,109,129,137,],[-2,95,-40,-56,-54,-47,-55,-46,-43,-53,-48,]),'LESSEQUAL':([3,83,91,104,105,106,107,108,109,129,137,],[-2,96,-40,-56,-54,-47,-55,-46,-43,-53,-48,]),'STRINGLITERAL':([29,],[36,]),'FLOAT':([5,12,13,18,30,38,39,49,50,100,103,131,],[11,11,11,11,-9,11,-7,11,11,11,11,11,]),'PLUS':([3,91,104,105,106,107,108,109,129,137,],[-2,113,-56,-54,-47,-55,-46,-43,-53,-48,]),'MULTIPLY':([3,104,105,106,107,108,109,129,137,],[-2,-56,-54,-47,-55,-46,121,-53,-48,]),'INTLITERAL':([72,74,78,79,80,81,89,90,93,94,95,96,97,98,99,110,111,112,113,119,120,121,122,126,135,],[-72,-72,-72,-72,-42,-72,-45,107,-68,-67,-66,-69,-70,-72,-65,-72,-41,-58,-57,-72,-60,-59,-44,-42,-72,]),'FUNCTION':([5,6,8,12,13,17,21,22,30,39,55,],[-72,-6,18,-72,-72,18,-5,-4,-9,-7,-24,]),'END':([5,6,7,8,12,13,16,17,19,21,22,25,30,39,50,52,53,55,57,58,60,61,62,63,65,66,67,69,73,77,92,116,117,133,139,],[-72,-6,15,-72,-72,-72,-23,-72,-3,-5,-4,-22,-9,-7,-72,55,-72,-24,-33,-25,-31,-34,-32,-30,-28,-29,-27,-72,-35,-26,-39,-38,-37,-71,-61,]),'MINUS':([3,91,104,105,106,107,108,109,129,137,],[-2,112,-56,-54,-47,-55,-46,-43,-53,-48,]),'WRITE':([6,12,13,21,22,30,39,50,53,57,60,61,62,63,65,66,69,73,92,100,103,115,116,117,118,131,133,138,139,],[-6,-72,-72,-5,-4,-9,-7,-72,64,-33,-31,-34,-32,-30,-28,-29,64,-35,-39,-72,-72,64,-38,-37,64,-72,-71,64,-61,]),'IF':([6,12,13,21,22,30,39,50,53,57,60,61,62,63,65,66,69,73,92,100,103,115,116,117,118,131,133,138,139,],[-6,-72,-72,-5,-4,-9,-7,-72,59,-33,-31,-34,-32,-30,-28,-29,59,-35,-39,-72,-72,59,-38,-37,59,-72,-71,59,-61,]),'INT':([5,12,13,18,30,38,39,49,50,100,103,131,],[10,10,10,10,-9,10,-7,10,10,10,10,10,]),'READ':([6,12,13,21,22,30,39,50,53,57,60,61,62,63,65,66,69,73,92,100,103,115,116,117,118,131,133,138,139,],[-6,-72,-72,-5,-4,-9,-7,-72,68,-33,-31,-34,-32,-30,-28,-29,68,-35,-39,-72,-72,68,-38,-37,68,-72,-71,68,-61,]),'ENDIF':([6,12,13,21,22,30,39,57,60,61,62,63,65,66,67,69,73,77,92,100,115,116,117,124,130,131,132,133,138,139,141,],[-6,-72,-72,-5,-4,-9,-7,-33,-31,-34,-32,-30,-28,-29,-27,-72,-35,-26,-39,-72,-72,-38,-37,-72,-63,-72,139,-71,-72,-61,-62,]),'RPAREN':([3,24,31,32,37,38,40,41,42,44,46,47,48,51,54,84,85,86,88,91,104,105,106,107,108,109,114,119,123,126,127,128,129,134,136,137,140,142,],[-2,-72,-16,-14,-72,-72,-15,-18,45,-72,-19,-21,-17,-72,-20,100,101,102,103,-40,-56,-54,-47,-55,-46,-43,-64,-72,129,-50,-72,137,-53,-52,-49,-48,-72,-51,]),'SEMICOLON':([3,23,24,31,32,35,36,37,40,56,82,87,91,101,102,104,105,106,107,108,109,129,137,],[-2,30,-72,-16,-14,39,-8,-72,-15,73,92,-36,-40,116,117,-56,-54,-47,-55,-46,-43,-53,-48,]),'FLOATLITERAL':([72,74,78,79,80,81,89,90,93,94,95,96,97,98,99,110,111,112,113,119,120,121,122,126,135,],[-72,-72,-72,-72,-42,-72,-45,104,-68,-67,-66,-69,-70,-72,-65,-72,-41,-58,-57,-72,-60,-59,-44,-42,-72,]),'COMMA':([3,24,37,44,46,51,91,104,105,106,107,108,109,127,129,137,140,],[-2,33,33,49,-19,49,-40,-56,-54,-47,-55,-46,-43,135,-53,-48,135,]),'LESS':([3,83,91,104,105,106,107,108,109,129,137,],[-2,99,-40,-56,-54,-47,-55,-46,-43,-53,-48,]),'ASSIGN':([3,20,70,],[-2,29,78,]),'BEGIN':([3,4,45,],[-2,5,50,]),'ENDWHILE':([6,12,13,21,22,30,39,57,60,61,62,63,65,66,67,69,73,77,92,103,116,117,118,125,133,139,],[-6,-72,-72,-5,-4,-9,-7,-33,-31,-34,-32,-30,-28,-29,-27,-72,-35,-26,-39,-72,-38,-37,-72,133,-71,-61,]),'DIVIDE':([3,104,105,106,107,108,109,129,137,],[-2,-56,-54,-47,-55,-46,120,-53,-48,]),'RETURN':([6,12,13,21,22,30,39,50,53,57,60,61,62,63,65,66,69,73,92,100,103,115,116,117,118,131,133,138,139,],[-6,-72,-72,-5,-4,-9,-7,-72,72,-33,-31,-34,-32,-30,-28,-29,72,-35,-39,-72,-72,72,-38,-37,72,-72,-71,72,-61,]),'IDENTIFIER':([1,6,9,10,11,12,13,14,21,22,26,27,28,30,33,39,43,50,53,57,60,61,62,63,65,66,69,72,73,74,75,76,78,79,80,81,89,90,92,93,94,95,96,97,98,99,100,103,110,111,112,113,115,116,117,118,119,120,121,122,126,131,133,135,138,139,],[3,-6,3,-11,-10,-72,-72,3,-5,-4,-13,3,-12,-9,3,-7,3,-72,3,-33,-31,-34,-32,-30,-28,-29,3,-72,-35,-72,3,3,-72,-72,-42,-72,-45,3,-39,-68,-67,-66,-69,-70,-72,-65,-72,-72,-72,-41,-58,-57,3,-38,-37,3,-72,-60,-59,-44,-42,-72,-71,-72,3,-61,]),'LPAREN':([3,34,59,64,68,71,72,74,78,79,80,81,89,90,93,94,95,96,97,98,99,105,110,111,112,113,119,120,121,122,126,135,],[-2,38,74,75,76,79,-72,-72,-72,-72,-42,-72,-45,110,-68,-67,-66,-69,-70,-72,-65,119,-72,-41,-58,-57,-72,-60,-59,-44,-42,-72,]),'EQUAL':([3,83,91,104,105,106,107,108,109,129,137,],[-2,94,-40,-56,-54,-47,-55,-46,-43,-53,-48,]),'VOID':([18,],[26,]),'WHILE':([6,12,13,21,22,30,39,50,53,57,60,61,62,63,65,66,69,73,92,100,103,115,116,117,118,131,133,138,139,],[-6,-72,-72,-5,-4,-9,-7,-72,71,-33,-31,-34,-32,-30,-28,-29,71,-35,-39,-72,-72,71,-38,-37,71,-72,-71,71,-61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'func_body':([50,],[52,]),'write_stmt':([53,69,115,118,138,],[57,57,57,57,57,]),'decl':([5,12,13,50,100,103,131,],[8,21,22,53,115,118,138,]),'stmt_list':([53,69,115,118,138,],[58,77,124,125,141,]),'assign_expr':([53,69,115,118,138,],[56,56,56,56,56,]),'assign_stmt':([53,69,115,118,138,],[60,60,60,60,60,]),'while_stmt':([53,69,115,118,138,],[63,63,63,63,63,]),'addop':([91,],[111,]),'read_stmt':([53,69,115,118,138,],[62,62,62,62,62,]),'var_decl':([5,12,13,50,100,103,131,],[12,12,12,12,12,12,12,]),'any_type':([18,],[27,]),'str':([29,],[35,]),'factor_prefix':([81,],[90,]),'call_expr':([90,],[106,]),'param_decl_tail':([44,51,],[48,54,]),'id_list':([14,75,76,],[23,85,86,]),'expr':([72,74,78,79,98,110,119,135,],[82,83,87,83,114,123,127,140,]),'func_declarations':([8,17,],[19,25,]),'var_type':([5,12,13,18,38,49,50,100,103,131,],[14,14,14,28,43,43,14,14,14,14,]),'expr_list':([119,],[128,]),'base_stmt':([53,69,115,118,138,],[65,65,65,65,65,]),'if_stmt':([53,69,115,118,138,],[66,66,66,66,66,]),'empty':([5,8,12,13,17,24,37,38,44,50,51,53,69,72,74,78,79,81,98,100,103,110,115,118,119,124,127,131,135,138,140,],[6,16,6,6,16,31,31,41,47,6,47,67,67,80,80,80,80,89,80,6,6,80,67,67,126,130,134,6,80,67,134,]),'func_decl':([8,17,],[17,17,]),'pgm_body':([5,],[7,]),'string_decl':([5,12,13,50,100,103,131,],[13,13,13,13,13,13,13,]),'cond':([74,79,],[84,88,]),'else_part':([124,],[132,]),'expr_list_tail':([127,140,],[136,142,]),'param_decl_list':([38,],[42,]),'stmt':([53,69,115,118,138,],[69,69,69,69,69,]),'id':([1,9,14,27,33,43,53,69,75,76,90,115,118,138,],[4,20,24,34,37,46,70,70,24,24,105,70,70,70,]),'mulop':([109,],[122,]),'compop':([83,],[98,]),'primary':([90,],[108,]),'expr_prefix':([72,74,78,79,98,110,119,135,],[81,81,81,81,81,81,81,81,]),'return_stmt':([53,69,115,118,138,],[61,61,61,61,61,]),'param_decl':([38,49,],[44,51,]),'postfix_expr':([90,],[109,]),'program':([0,],[2,]),'id_tail':([24,37,],[32,40,]),'factor':([81,],[91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM id BEGIN pgm_body END','program',5,'p_program_program','parser.py',12),
  ('id -> IDENTIFIER','id',1,'p_program_idea','parser.py',16),
  ('pgm_body -> decl func_declarations','pgm_body',2,'p_program_pgm_body','parser.py',20),
  ('decl -> string_decl decl','decl',2,'p_program_decl','parser.py',24),
  ('decl -> var_decl decl','decl',2,'p_program_decl','parser.py',25),
  ('decl -> empty','decl',1,'p_program_decl','parser.py',26),
  ('string_decl -> STRING id ASSIGN str SEMICOLON','string_decl',5,'p_gstring_string_decl','parser.py',32),
  ('str -> STRINGLITERAL','str',1,'p_gstring_str','parser.py',36),
  ('var_decl -> var_type id_list SEMICOLON','var_decl',3,'p_variables_var_decl','parser.py',42),
  ('var_type -> FLOAT','var_type',1,'p_variables_var_type','parser.py',46),
  ('var_type -> INT','var_type',1,'p_variables_var_type','parser.py',47),
  ('any_type -> var_type','any_type',1,'p_variables_any_type','parser.py',51),
  ('any_type -> VOID','any_type',1,'p_variables_any_type','parser.py',52),
  ('id_list -> id id_tail','id_list',2,'p_variables_id_list','parser.py',56),
  ('id_tail -> COMMA id id_tail','id_tail',3,'p_variables_id_tail','parser.py',60),
  ('id_tail -> empty','id_tail',1,'p_variables_id_tail','parser.py',61),
  ('param_decl_list -> param_decl param_decl_tail','param_decl_list',2,'p_fparams_param_decl_list','parser.py',67),
  ('param_decl_list -> empty','param_decl_list',1,'p_fparams_param_decl_list','parser.py',68),
  ('param_decl -> var_type id','param_decl',2,'p_fparams_param_decl','parser.py',72),
  ('param_decl_tail -> COMMA param_decl param_decl_tail','param_decl_tail',3,'p_fparams_param_decl_tail','parser.py',76),
  ('param_decl_tail -> empty','param_decl_tail',1,'p_fparams_param_decl_tail','parser.py',77),
  ('func_declarations -> func_decl func_declarations','func_declarations',2,'p_fdecl_func_declarations','parser.py',83),
  ('func_declarations -> empty','func_declarations',1,'p_fdecl_func_declarations','parser.py',84),
  ('func_decl -> FUNCTION any_type id LPAREN param_decl_list RPAREN BEGIN func_body END','func_decl',9,'p_fdecl_func_decl','parser.py',88),
  ('func_body -> decl stmt_list','func_body',2,'p_fdecl_func_body','parser.py',92),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_statements_stmt_list','parser.py',98),
  ('stmt_list -> empty','stmt_list',1,'p_statements_stmt_list','parser.py',99),
  ('stmt -> base_stmt','stmt',1,'p_statements_stmt','parser.py',103),
  ('stmt -> if_stmt','stmt',1,'p_statements_stmt','parser.py',104),
  ('stmt -> while_stmt','stmt',1,'p_statements_stmt','parser.py',105),
  ('base_stmt -> assign_stmt','base_stmt',1,'p_statements_base_stmt','parser.py',109),
  ('base_stmt -> read_stmt','base_stmt',1,'p_statements_base_stmt','parser.py',110),
  ('base_stmt -> write_stmt','base_stmt',1,'p_statements_base_stmt','parser.py',111),
  ('base_stmt -> return_stmt','base_stmt',1,'p_statements_base_stmt','parser.py',112),
  ('assign_stmt -> assign_expr SEMICOLON','assign_stmt',2,'p_basic_assign_stmt','parser.py',117),
  ('assign_expr -> id ASSIGN expr','assign_expr',3,'p_basic_assign_expr','parser.py',121),
  ('read_stmt -> READ LPAREN id_list RPAREN SEMICOLON','read_stmt',5,'p_basic_read_stmt','parser.py',125),
  ('write_stmt -> WRITE LPAREN id_list RPAREN SEMICOLON','write_stmt',5,'p_basic_write_stmt','parser.py',129),
  ('return_stmt -> RETURN expr SEMICOLON','return_stmt',3,'p_basic_return_stmt','parser.py',133),
  ('expr -> expr_prefix factor','expr',2,'p_expressions_expr','parser.py',140),
  ('expr_prefix -> expr_prefix factor addop','expr_prefix',3,'p_expressions_expr_prefix','parser.py',144),
  ('expr_prefix -> empty','expr_prefix',1,'p_expressions_expr_prefix','parser.py',145),
  ('factor -> factor_prefix postfix_expr','factor',2,'p_expressions_factor','parser.py',149),
  ('factor_prefix -> factor_prefix postfix_expr mulop','factor_prefix',3,'p_expressions_factor_prefix','parser.py',153),
  ('factor_prefix -> empty','factor_prefix',1,'p_expressions_factor_prefix','parser.py',154),
  ('postfix_expr -> primary','postfix_expr',1,'p_expressions_postfix_expr','parser.py',158),
  ('postfix_expr -> call_expr','postfix_expr',1,'p_expressions_postfix_expr','parser.py',159),
  ('call_expr -> id LPAREN expr_list RPAREN','call_expr',4,'p_expressions_call_expr','parser.py',163),
  ('expr_list -> expr expr_list_tail','expr_list',2,'p_expressions_expr_list','parser.py',167),
  ('expr_list -> empty','expr_list',1,'p_expressions_expr_list','parser.py',168),
  ('expr_list_tail -> COMMA expr expr_list_tail','expr_list_tail',3,'p_expressions_expr_list_tail','parser.py',172),
  ('expr_list_tail -> empty','expr_list_tail',1,'p_expressions_expr_list_tail','parser.py',173),
  ('primary -> LPAREN expr RPAREN','primary',3,'p_expressions_primary','parser.py',177),
  ('primary -> id','primary',1,'p_expressions_primary','parser.py',178),
  ('primary -> INTLITERAL','primary',1,'p_expressions_primary','parser.py',179),
  ('primary -> FLOATLITERAL','primary',1,'p_expressions_primary','parser.py',180),
  ('addop -> PLUS','addop',1,'p_expressions_addop','parser.py',184),
  ('addop -> MINUS','addop',1,'p_expressions_addop','parser.py',185),
  ('mulop -> MULTIPLY','mulop',1,'p_expressions_mulop','parser.py',189),
  ('mulop -> DIVIDE','mulop',1,'p_expressions_mulop','parser.py',190),
  ('if_stmt -> IF LPAREN cond RPAREN decl stmt_list else_part ENDIF','if_stmt',8,'p_complex_if_stmt','parser.py',195),
  ('else_part -> ELSE decl stmt_list','else_part',3,'p_complex_else_part','parser.py',199),
  ('else_part -> empty','else_part',1,'p_complex_else_part','parser.py',200),
  ('cond -> expr compop expr','cond',3,'p_complex_cond','parser.py',204),
  ('compop -> LESS','compop',1,'p_complex_compop','parser.py',208),
  ('compop -> GREATER','compop',1,'p_complex_compop','parser.py',209),
  ('compop -> EQUAL','compop',1,'p_complex_compop','parser.py',210),
  ('compop -> NOTEQUAL','compop',1,'p_complex_compop','parser.py',211),
  ('compop -> LESSEQUAL','compop',1,'p_complex_compop','parser.py',212),
  ('compop -> GREATEQUAL','compop',1,'p_complex_compop','parser.py',213),
  ('while_stmt -> WHILE LPAREN cond RPAREN decl stmt_list ENDWHILE','while_stmt',7,'p_whilestatement_while_stmt','parser.py',218),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',224),
]
